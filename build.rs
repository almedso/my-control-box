use std::env;
use std::process::Command;

fn punch_in_versions()  {
    // Git Commit Hash
    let git_hash = Command::new("git")
        .args(["rev-parse", "HEAD"])
        .output()
        .map(|o| String::from_utf8_lossy(&o.stdout).trim().to_string())
        .unwrap_or_else(|_| "unknown".into());

    // Git Tag (falls vorhanden)
    let git_tag = Command::new("git")
        .args(["describe", "--tags", "--abbrev=0"])
        .output()
        .map(|o| String::from_utf8_lossy(&o.stdout).trim().to_string())
        .unwrap_or_else(|_| "no-tag".into());

    // Setze Umgebungsvariablen fÃ¼r den Build
    println!("cargo:rustc-env=GIT_HASH={}", git_hash);
    println!("cargo:rustc-env=GIT_TAG={}", git_tag);

    // Crate Version aus Cargo.toml
    let crate_version = env::var("CARGO_PKG_VERSION").unwrap_or_else(|_| "unknown".into());
    println!("cargo:rustc-env=CRATE_VERSION={}", crate_version);
}

use std::fs;
use std::io::{Write, Result};
use std::path::Path;

fn generate_register_content(src_dir: &Path) -> Result<String> {
    let mut calls = Vec::new();

    for entry in fs::read_dir(src_dir)? {
        let entry = entry?;
        let path = entry.path();
        if let Some(fname) = path.file_name().and_then(|f| f.to_str()) {
            if fname.ends_with("_yew.rs") {
                let mod_name = fname.trim_end_matches(".rs");
                calls.push(format!("    crate::time_signal::{}::register();", mod_name));
            }
        }
    }

    let pre = "// Auto-generated by build.rs\n\n\
        pub fn register_local_time_signals() {\n";

    let content = &calls.join("\n");

    let post = "\n}\n";
    Ok(format!("{}{}{}", pre, content, post))
}


fn generate_register_all_yew() -> Result<()> {
    let src_dir = Path::new("src/time_signal");
    let dest = Path::new("src/time_signal/register.rs");

    let new_code = generate_register_content(src_dir)?;

    // Only write if different
    let write_needed = match fs::read(&dest) {
        Ok(existing) => existing != new_code.as_bytes(),
        Err(_) => true, // file missing
    };

    if write_needed {
        let mut f = fs::File::create(&dest).unwrap();
        f.write_all(new_code.as_bytes()).unwrap();
    }

    println!("cargo:rerun-if-changed=src/time_signal/");
    Ok(())
}

fn main() -> Result<()> {
    punch_in_versions();
    generate_register_all_yew()?;
    Ok(())
}